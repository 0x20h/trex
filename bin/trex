#!/usr/bin/env python

from subprocess import call, check_output
import os, uuid, json, argparse

"""
record a new terminal session.
"""
def record(args):
	prefix = 'trex_'
	cols = check_output(['tput', 'cols'])[:-1]
	lines = check_output(['tput', 'lines'])[:-1]
	timing, script = [], []

	timingfile = ''.join([args.tmp, '/', prefix, str(uuid.uuid4())])
	scriptfile = ''.join([args.tmp, '/', prefix, str(uuid.uuid4())])
	
	os.system('clear')
	# run script
	ret = os.system('script -q -t ' + scriptfile + ' 2>' + timingfile)

	if (ret):
		os.unlink(timingfile)
		os.unlink(scriptfile)
		exit(1)
	
	chunks = []
# reformat to json
	with open(timingfile, 'r') as f:
		timing = [line[:-1].split() for line in f.readlines()]
		s = open(scriptfile, 'r')
		# skip first line
		s.readline()
		
		for t in timing:
			# read t[1] bytes from scriptfile
			chunk = s.read(int(t[1]))
			chunks.append([round(float(t[0]), 3), chunk])
		
		s.close()
		f.close()
	
	s = json.dumps({ 'cols': cols, 'rows': lines, 'chunks': chunks})

# write json file
	with open(args.outfile, 'w') as f:
		f.write(s)
		f.close()
		os.unlink(timingfile)
		os.unlink(scriptfile)

	os.system('clear')

"""
Replay a recorded trex session
"""
def replay(args):
	trex_file = json.load(open(args.file, 'r'))
	timingfile = ''.join(['/tmp', '/', 'trex_replay_timing_', str(uuid.uuid4())])
	scriptfile = ''.join(['/tmp', '/', 'trex_replay_script_', str(uuid.uuid4())])
	timing = ''


	with open(timingfile, 'w') as f:
		for element in trex_file['timing']:
			f.write(element[0] + " " + element[1] + "\n")
	
	with open(scriptfile, 'w') as f:
		f.write(trex_file['script'].encode('utf-8'))
	
	ret = os.system('scriptreplay -t ' + timingfile + ' ' + scriptfile)
	os.unlink(timingfile)
	os.unlink(scriptfile)
		
# cli setup
parser = argparse.ArgumentParser(description=('trex - a terminal recorder wrapper around `script`: '
	'This program records your current terminal session and stores it as a '
	'json encoded file in OUT_FILE. Use the generated file to playback the session in your '
	'browser using the trex jQuery plugin.'
))

subparsers = parser.add_subparsers(metavar="ACTION")
action = subparsers.add_parser('record', description="record a session", help="record a new session in OUT_FILE")
action.add_argument('outfile', metavar='OUT_FILE', type=str, help=('The JSON-encoded session file (e.g. /some/path/my-session.json)'))
action.add_argument('--tmp', metavar='DIR', type=str, 
	help='tmp dir for scriptfiles [/tmp]', default='/tmp')
action.set_defaults(func=record)

action = subparsers.add_parser('replay', description="replay a session", help="replay a recorded session stored in FILE")
action.add_argument('file', metavar='FILE', type=str, help=('The JSON-encoded session file to be replayed (e.g. /some/path/my-session.json)'))
action.set_defaults(func=replay)

args = parser.parse_args()
args.func(args)
